

1. intiialize project
2. NPM in intiialize
3. Pack.json file - name Blog-backend-api
4. Express Progject for Blog-backend-Api
5. Entry point Node.json
6. Author Malvia
7. Directory in VSCODE
8. Express Project
9. .node_modules & .env
10. npm install Express
11. nodemon dependency
12. Express json
13. start - node server.json
14. nodemon server.json
15. npm run dev
16. create .env file
17. fetch port from value, code module of .ejs
18. dotenv installed 
19. 

// Fruits to be Cited


1. Download node 
2. npm init -y

3. npm i connect-mongo cookie-parser bcrypt dotenv ejs express express-ejs-layouts express-session jsonwebtoken method-override mongoose
4. npm i nodemon --save-dev
5. run nodemon server.js

6. Add node_modules
7. .env 
8. Hide all node_modules // .env

9. 


// This is a go back button: For the links     <a href="/">Go Back</a>
// I need to use the Notes.txt more. I need to have a database that holds all of the data compiled into one.

As well 

INDUCES THANK GOD FOR THE FRUITS APP AND CRUD

Authentication / FRUITS APP

MONGO DB Connected // Tested and With CRUD AND INDUCES
// Live server

// Cite Everything
// Partials are for everything! 

Check the Routes with the other code and make it so that it works out.
But this is looking pretty great ngl.
Once I get it figured out. It will be smooth sailing fromhere.

Other hard piece is the Authentication.


// HEROKU

// Design Is LAST!

// SAve Blog Post -> Route Handler for all the buttons
    // Update Account Info

    This is my CRUD AND INDUCSE Practice!

    This is what I am going to be known for. It's not impossible. Just get it done!

    // Cannot get Login

    // Getting caught up. But this is looking really good with bare bones. 
    As long as I get the CRUD / INDUCES/ Login SETUP.
    // And Launch it to the Server with Mongo with that video I am good to go.

    Let's fucking built it out. 
    Make sure to submit it and cite everything that is required and needed!

    // Routes are looking great. All I need to do is now add the functions. that what controllers are for. Make it as simple as possible. It will allow me to tackle into more of this space. I will make sure to break everything down and fight for my SPOT!

    I appreciate them and I really do Like Justin and Billie The best type of people!


    Calling back data is amazing. Let's see how they make that blog and then add that piece to my own website this will be amazing.

// FRUITS Page

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index Page</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/forms.css">    
</head>
<body>
    
    <div class="container">
        <%- include('./partials/navbar.ejs', {header:'This is the index page'}) %>

        <header>
            <h1>Social Sync</h1>
        </header>
    <ul>
        <% for (let i = 0; i < 3; i++) { %>
            <li>
                <a href="/blogPost/<%= i %>">Blog Post <%= i %></a>
                <form action="/blogPosts/<%= i %>?_method=DELETE" method="POST">
                    <input type="submit" value="DELETE">
                </form>
            </li>
            <li>
                <a href="/fruits/<%= i %>">Fruit <%= i %></a>
                <form action="/fruits/<%= i %>?_method=DELETE" method="POST">
                    <input type="submit" value="DELETE">
                </form>
            </li>
        <% } %>
        <%- include('./partials/blogInputs.ejs')%>
        <%- include('./partials/profilePhoto.ejs')%>
        <%- include('./partials/profileInputs.ejs')%>
       <%- include('./partials/blogInputs.ejs')%>
    </ul>
    <script src="/js/app.js"></script>
    <a href="/">Go Back</a>
</body>
</html>

i need to get this all done for the editing field of what we need. this doesnt need to be edited or deleted. This is only update.
That's all we need.

Patch is a better function.
I will have to seek what the looks like exactly.
Breakdown each Function.

Why are you talking to me.

Literally finish your code. That is what we have to do. 
IDK why you don't care about it atm. It's not cool for you to do that. Once they are ready. I need to gather all my intel.

Circle of Tonight - This is the Process. Let's Get it! 

1. Trial and Error
2. Learning
3. Documentation
4. Implementation
5. Trial and Error
6. Check for What's Needed Next
7. Optmize
8. Back to the Top

I am well equiped and I can finish this tonight! Let's Make sure to get it. And style and get it done TN. Get those styles done ASAP! 

I needed the Visual so I can work through it, this is why it's great!

Looking Good. How do I design it?

That's what I want and then I can add the function now! This is definitely so much fun!

Modular Approach this is how we take it and build off of what is available. Adding in the quotation and adding in the details of modular function is what is necessary.

Now this place is a catch all like a SEO or Funnel. This is the perfect Funnel. And now we can just add it in. It is looking like it's coming together for real! All I need is the functionality and the Design and then I am ready!

Change the Color and all is well that ends amazing.

Simple function and then have a place where we see all the Blogs in one place

Home
INDUCES

/ Index
/ New
// Delete
// Update
// Create
// -- Create User?
// Edit
// 


Profile

INDUCES
Index
New
// Create New User Function
Delete
// Delete User
Update
// Update User
Create
// Create User
Edit
Edit User
Sa


It's Simple.



Edit Profile
INDUCES

Create
ready
Update
DELETE


New Post

Create
ready
Update
DELETE


Blog Posts
Create
ready
Update
DELETE


Edit Posts
Create
ready
Update
DELETE



Log Out

Make it just Practice and Use POSTMAN. Is all you need!

// FIll In Details - DO a POSTMAN Connection Piece - Extrapulate the data

POST // updateStatus

POST // updateAccountInfo

POST // updateBasicInfo

POST // updateContactInfo

POST // updateEducationInfo

POST // saveBlogPost

 hit them in the Partials that is what we have to edit. This will be a great app. I already know it.
 I need to make sure the authentication works out.

 I will be caught up with everything and make sure it works out.


Get it for Profile & Blogs
Have it with the database

And that is what I need to build and then carry on that way.


Learn about the blog Website all nigt

Get it for 2 hours
and apply it through then put Auth and login.

But have it so that it's not connected. But can be later.

Option

https://www.youtube.com/watch?v=nvSVZW2x8BQ&list=PL6u82dzQtlfvJoAWdyf5mUxPQRnNKCMGt&index=4

https://www.youtube.com/watch?v=Nmv2-oSQyWE

https://www.youtube.com/watch?v=gv3FFnOdCIo&list=PL4cUxeGkcC9hAJ-ARcYq_z6lDZV7kT1xD&index=2

https://www.youtube.com/watch?v=fgTGADljAeg

https://www.youtube.com/watch?v=H9M02of22z4&t=602s

https://github.com/dmalvia/Express_MongoDB_Rest_API_Tutorial/tree/main\

https://www.youtube.com/watch?v=nvSVZW2x8BQ&list=PL6u82dzQtlfvJoAWdyf5mUxPQRnNKCMGt&index=4


// API Routes

// app.get("/api/blogs", (req, res) => {
//     res.json({message: "Get all blogs"});
// });

// app.get("/api/blogs", (req, res) => {
//     res.status(200).json({message: "Get all blogs"});
// });

// app.use("/api/blogs", require("./routes/blogRoutes"));

?/ Home controllers

// const express = require('express')
// const router = express.Router();

// const fruits = require('../models/fruits')
// const blogPosts = require('../models/blogPosts')


// // New POST 
// router.get('/home', (req , res) => {
//     res.render('index.ejs')
// })

// // GET ROUTE
// router.get('/blogPosts/new', (req, res) => {
//     res.render('newPost.ejs')
// })

// // DELETE ROUTE
// router.delete('/blogPosts/:index', (req, res) => {
//     blogPosts.splice(req.params.index, 1)
//     res.redirect('/blogPosts')
// }) // models

// // POST ROUTE
// router.post("/blogPosts/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     blogPosts.push(req.body);
//     res.render('index.ejs', { blogPosts });
// });

// // SHOW ROUTE
// router.get('/blogPosts/:index', (req, res) => {
//     console.log(req.params.index)
//     const blogPost = blogPosts [req.params.index]
//     res.render('show.ejs', {blogPost})
// })

// module.exports = router 



// Fruits controller


// const express = require('express')
// const router = express.Router();

// const fruits = require('../models/fruits')
// const blogPosts = require('../models/blogPosts')


// // INDEX ROUTE
// router.get('/blog', (req, res) => {
//    res.render('index.ejs', { fruits })
// });

// // NEW - Send back a form to create new fruits
// router.get("/new", (req, res) => {
//     res.render("new-fruit", { currentUser: req.session.currentUser });
//   });

// // DELETE ROUTE
// router.delete('/fruits/:index', (req, res) => {
//     fruits.splice(req.params.index, 1)
//     res.redirect('/fruits')
// })

// // Update Route (PUT/Update): This route receives the PUT request sent from the edit route,
// // edits the specified fruit document using the form data,
// // and redirects the user back to the show page for the updated location.
// router.put("/:id", async (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === "on" ? true : false;
//     await db.Fruit.findByIdAndUpdate(req.params.id, req.body, { new: true }).then(
//       (fruit) => res.redirect("/fruits/" + fruit._id)
//     );
//   });

// // CREATE ROUTE
// router.get('/fruits/new', (req, res) => {
//     res.render('new.ejs')
// });

// // POST ROUTE
// router.post("/fruits/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     fruits.push(req.body);
//     res.render('index.ejs', { fruits });
// });


// // Edit Route (GET/Read): This route renders a form
// // the user will use to PUT (edit) properties of an existing fruit
// router.get("/:id/edit", (req, res) => {
//     db.Fruit.findById(req.params.id).then((fruit) => {
//       res.render("edit-fruit", {
//         fruit: fruit,
//         currentUser: req.session.currentUser 
//       });
//     });
//   });




// // POST ROUTE
// router.post("/fruits/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     fruits.push(req.body);
//     res.render('index.ejs', { fruits });
// });

// // SHOW ROUTE
// router.get('/fruits/:index', (req, res) => {
//     console.log(req.params.index)
//     const fruit = fruits [req.params.index]
//     res.render('show.ejs', {fruit})
// })


// module.exports = router 

POKEMON CONTROLLER//

// const express = require('express');
// const router = express.Router()

// const pokemon = require('../models/pokemon');

// router.get('/pokemon/:name', (req, res) => {
//     res.send({pokemon: pokemon.filter(p => p === req.params.name)})
// }) 

// module.exports = router;


// BLOG1 CONTROLLER

// //@desc Get all blogs
// //@route GET /api/blogs
// //@access public // Later on Private when introduce the Auth
// // Not Logical
// const getBlogs = (req, res) => {
//     res.status(200).json({ message: `Get All Blogs`});
// };

// //@desc Create New Blog
// //@route POST /api/blogs
// //@access public
// // Not Logical
// const createBlog = (req, res) => {
//     console
//     res.status(201).json({ message: `Create Blog`});
// };


// //@desc Get New Blog
// //@route GET /api/blogs/:id
// //@access public
// // Not Logical
// const getBlog = (req, res) => {
//     res.status(200).json({ message: `Create Blog for ${req.params.id}`});
// };

// //@desc Update New Blog
// //@route UPDATE /api/blogs/:id
// //@access public
// // Not Logical
// const updateBlog = (req, res) => {
//     res.status(201).json({ message: `Update Blog for ${req.params.id}`});
// };

// //@desc Delete New Blog
// //@route DELETE /api/blogs/:id
// //@access public
// //Not Logical
// const deleteBlog = (req, res) => {
//     res.status(200).json({ message: `Delete Blog for ${req.params.id}`});
// };

// module.exports = {
//     getBlogs,
//     createBlog,
//     getBlog,
//     updateBlog,
//     deleteBlog,
// };


// /***************************************************************************************
// *    Citation: Line 1-49
// *    Title: Nodejs & Express Crash Course
// *    Author: Dipesh Malvia, 
// *    Date Accessed: 3/18 -3/19/24
// *    Date: Jan 31, 2023
// *    Code version: <code version>
// *    Availability: https://github.com/dmalvia/Express_MongoDB_Rest_API_Tutorial
// *
// ***************************************************************************************/

// MODELS // FRUITS

// // aka fruits model
// const mongoose = require('mongoose');
// const fruitSchema = new mongoose.Schema({
//     name: {type: String, required: true},
//     color: {type:String},
//     readyToEat: {type: Boolean},
//     user: { type: mongoose.Types.ObjectId, ref: 'User'}
// })


// module.exports = mongoose.model("Fruit", fruitSchema)


// MODELS // POKEMON

// Import the necessary modules
const mongoose = require('mongoose');

// Define the schema for the Pokemon model
const pokemonSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    type: {
        type: String,
        required: true
    },
    height: {
        type: Number,
        required: true
    },
    weight: {
        type: Number,
        required: true
    },
    abilities: {
        type: [String],
        required: true
    }
});

// Create the Pokemon model using the schema
const Pokemon = mongoose.model('Pokemon', pokemonSchema);

// Export the model to make it accessible in other files
module.exports = Pokemon;

// Good Example from App

// const mongoose = require('mongoose');

// const userSchema = new mongoose.Schema({
//     name: {
//         type: String,
//         required: true,
//     },
//     email: {
//         type: String,
//         required: true, 
//     },
//     phone: {
//         type: String,
//         required: true,
//     },
//     image: {
//         type: String,
//         required: true, // Fixed typo here
//     },
//     created: {
//         type: Date,
//         required: true,
//         default: Date.now,
//     },
// });

// const User = mongoose.model('User', userSchema);

// module.exports = User;


// Citation https://www.youtube.com/watch?v=nvSVZW2x8BQ&list=PL6u82dzQtlfvJoAWdyf5mUxPQRnNKCMGt&index=4

// BLOG Router


// const express = require('express')
// const router = express.Router();

// const fruits = require('../models/fruits')
// const blogPosts = require('../models/blogPosts')

// router.get('/blogPosts', (req, res) => {
//     res.render('index.ejs', { blogPosts }); }) 

// // router.get('/blogPosts', (req, res) => {
// //    res.render('index.ejs', { blogPosts })
// // }) // shoots to index

// // GET ROUTE
// router.get('/blogPosts/new', (req, res) => {
//     res.render('newPost.ejs')
// })

// // DELETE ROUTE
// router.delete('/blogPosts/:index', (req, res) => {
//     blogPosts.splice(req.params.index, 1)
//     res.redirect('/blogPosts')
// }) // models

// // POST ROUTE
// router.post("/blogPosts/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     blogPosts.push(req.body);
//     res.render('index.ejs', { blogPosts });
// });

// // SHOW ROUTE
// router.get('/blogPosts/:index', (req, res) => {
//     console.log(req.params.index)
//     const blogPost = blogPosts [req.params.index]
//     res.render('show.ejs', {blogPost})
// })

// module.exports = router 


// BLOG Routes

const express = require("express");
const router = express.Router();
const blogPost = require('../models/blogPosts');
// const { 
//         getBlogs,
//         createBlog,
//         getBlog,
//         updateBlog,
//         deleteBlog,
//     } = require('../controllers/blog1Controller');

// // @desc Delete Blog
// // @AbortController

// // router.route("/api/blogs", (req, res) => {
// //     res.status(200).json({ Message: "Can I send code through here?"});
// // });

// / ROUTE WORKS! // WORKS // INDEX = HOME
router.get('/', (req, res) => {
    res.render('index')
})

// GETTING ALL ROUTE // www.localhost:9000/blogPosts/ WORKS
// router.get('/', async (req, res) => {
//     try{
//         const blogPosts = await blogPosts.find()
//         res.json(blogPosts)
//     } catch (err) {
//         res.status(500).json({ message: err.message})
//        }  
// });

// Adding in data says 200 so Successful
// CREATE ROUTE
// router.post("/newPost", (req, res) => {
//     const postBlog = {
//         title: req.body.title,
//         content: req.body.content,
//         author: req.body.auther,
//         date: req.body.date,
//     };
  
//     blogPosts.push(newPost);
  
//     console.log(req.body);
//     console.log("New Blog Added:", newPost);
  
//     res.redirect("/newPost"); // Redirect to the drinks index route
//   });



// CREATE ROUTE 
// router.post("/newPost", async (req, res) => {
//     res.body.blogPosts = req.body.blogPosts === "on" ? true : false;
//     console.log(req.session);
//     req.body.user = req.session.currentUser._id;
//     await db.postBlog.create(req.body).then((postblog) =>
//     res.redirect("/blogPosts/" + blogPost._id)
//     );
// });

// router.post("/newPost", async (req, res) => {
//     // Extract data from the request body
//     const newBlogPostData = {
//         title: req.body.title,
//         content: req.body.content,
//         author: req.body.author,
//         // Assuming date will be automatically set in the database
//     };

//     // Set the user ID from session
//     newBlogPostData.user = req.session.currentUser._id;

//     try {
//         // Create a new blog post using the data
//         const newBlogPost = await db.postBlog.create(newBlogPostData);

//         // Redirect to the newly created blog post's route
//         res.redirect("/blogPosts/" + newBlogPost._id);
//     } catch (error) {
//         // Handle any errors and send an error response
//         console.error("Error creating new blog post:", error);
//         res.status(500).send("Error creating new blog post");
//     }
// });


app.post('/updateStatus', (req, res) => {
  // Logic to process form data and update status
});

// // GET ROUTE
// router.route("/").get(getBlogs);

// // POST ROUTE
// router.route("/").post(createBlog);

// // CREATE ROUTE
// router.route("/:id").get(getBlog);

// // UPDATE ROUTE
// router.route("/:id",).put(updateBlog);

// // DELETE ROUTE
// router.route("/:id",).delete(deleteBlog);

// // const {
// //     getBlogs,
// //     createBlog,
// //     getBlog,
// //     updateBlog,
// //     deleteBlog,
// // } = require("../controllers/blogController");


// module.exports = router;

//edit PROFILE CONTROLLER
// const express = require('express')
// const router = express.Router();

// // Pulling from models database
// const blogPosts = require('../models/blogPosts')
// const profile = require('../models/profile')
// // edit profile pulls from Profile models

// // EDIT PROFILE
// router.get('/editProfile', (req , res) => {
//     res.render('editProfile')
// })
// // DONE 

// router.get('/blogPosts', (req, res) => {
//    res.render('index.ejs', { blogPosts })
// }) // shoots to index

// // GET ROUTE
// router.get('/blogPosts/new', (req, res) => {
//     res.render('newPost.ejs')
// })

// // DELETE ROUTE
// router.delete('/blogPosts/:index', (req, res) => {
//     blogPosts.splice(req.params.index, 1)
//     res.redirect('/blogPosts')
// }) // models

// // POST ROUTE
// router.post("/blogPosts/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     blogPosts.push(req.body);
//     res.render('index.ejs', { blogPosts });
// });

// // SHOW ROUTE
// router.get('/blogPosts/:index', (req, res) => {
//     console.log(req.params.index)
//     const blogPost = blogPosts [req.params.index]
//     res.render('show.ejs', {blogPost})
// })

// module.exports = router 


// NEW POST PROFILE CONTROLLER CAN BE DONE IN VIEWS


// const express = require('express')
// const router = express.Router();

// const fruits = require('../models/fruits')
// const blogPosts = require('../models/blogPosts')


// // New POST 
// router.get('/newPost', (req , res) => {
//     res.render('newPost')
// })
// // COMPLETED

// // GET ROUTE
// router.get('/blogPosts/new', (req, res) => {
//     res.render('newPost.ejs')
// })

// // DELETE ROUTE
// router.delete('/blogPosts/:index', (req, res) => {
//     blogPosts.splice(req.params.index, 1)
//     res.redirect('/blogPosts')
// }) // models

// // POST ROUTE
// router.post("/blogPosts/", (req, res) => {
//     req.body.readyToEat = req.body.readyToEat === 'on' ? true : false;
//     blogPosts.push(req.body);
//     res.render('index.ejs', { blogPosts });
// });

// // SHOW ROUTE
// router.get('/blogPosts/:index', (req, res) => {
//     console.log(req.params.index)
//     const blogPost = blogPosts [req.params.index]
//     res.render('show.ejs', {blogPost})
// })

// module.exports = router 

// Have Home - ALL Blogs
Profile - ALL PROFILE

Home status
Profile status
Edit Profile status
